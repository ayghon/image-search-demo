/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Listly API v4
 * OpenAPI spec version: 1.0.0
 */
import {useQuery} from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {ImageCollection, FindImagesParams} from '../../models';
import {customAxiosInstance} from '../../customAxiosInstance';
import type {ErrorType} from '../../customAxiosInstance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const findImages = (
  params: FindImagesParams,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<ImageCollection>(
    {url: `/search/image`, method: 'get', params, signal},
    options,
  );
};

export const getFindImagesQueryKey = (params: FindImagesParams) =>
  [`/search/image`, ...(params ? [params] : [])] as const;

export const getFindImagesQueryOptions = <
  TData = Awaited<ReturnType<typeof findImages>>,
  TError = ErrorType<void>,
>(
  params: FindImagesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findImages>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof findImages>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindImagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findImages>>> = ({
    signal,
  }) => findImages(params, requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type FindImagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof findImages>>
>;
export type FindImagesQueryError = ErrorType<void>;

export const useFindImages = <
  TData = Awaited<ReturnType<typeof findImages>>,
  TError = ErrorType<void>,
>(
  params: FindImagesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findImages>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getFindImagesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
